/*
    BSD 3-Clause License
    Copyright (c) 2023, Doosan Robotics Inc.
*/
import {
  Context,
  ModuleService,
  IModuleChannel,
  IProgramManager,
  ProgramSaveMode,
  Message,
  logger,
  IDartFileSystem,
  ModuleContext,
  SixNumArray,
} from 'dart-api';

//DRL Code.
import drlPath from './UserCommandDRL.drl';
import Database, { IDBData } from '../DatabaseManager';

//Sub program class
export default class UserCommandService extends ModuleService {
  private db = {} as Database;

  /*****
   * Main Life Cycle
   * Constructor -> render -> ComponentDidMount -> componentDidUpdate -> OnBind
   *****/

  protected constructor(context: ModuleContext) {
    super(context);
    this.db = new Database(context);
  }

  //onBind
  onBind(message: Message, channel: IModuleChannel): boolean {
    logger.debug(
      `User command onBind: ${this.moduleContext.componentId}, ${JSON.stringify(
        message,
      )}`,
    );

    const programManager = this.moduleContext.getSystemManager(
      Context.PROGRAM_MANAGER,
    ) as IProgramManager;
    const fileSystem = this.moduleContext.getSystemLibrary(
      Context.DART_FILE_SYSTEM,
    ) as IDartFileSystem;

    /*********
     *   1. Event "req_to_save_commands_def_as_sub_program"
     *   Define and save Sub Program Function
     *   componentId : Screen component Id. Write in mainfest.json
     *   programName : The program name created by the taskeditor. It will automatically generated by the task editor.
     *********/
    channel.receive(
      'req_to_save_commands_def_as_sub_program',
      async ({ programName }) => {
        logger.debug(`Sub_DRL check, Program Name = ${programName}  `);

        // 1-1. Define Sub Program function
        let subProgram = `from DRCF import *\r\n`;

        const dbData = (await this.db.getDataAll()) as IDBData;
        subProgram += `Global_ip = "${dbData.ip}"\r\n`;
        subProgram += `Global_initPoseZyx = [${dbData.initPose.pose}]\r\n`;

        const drl = await fileSystem.readFile(this.moduleContext, drlPath);
        subProgram += drl;

        // 1-2. Save Sub Program function
        // logger.debug(`Sub_DRL : ${program}`);
        const result = await programManager.saveSubProgram(
          ProgramSaveMode.SAVE,
          programName,
          subProgram,
        );
        channel.send('req_to_save_commands_def_as_sub_program', result);

        // logger.debug(`Save Sub Program Result = ${result}`);
      },
    );

    /*********
     *   2. Event "gen_command_call"
     *   Define function execute statement and send it to Task Editor
     *   componentId : Screen component Id. Write in mainfest.json
     *   data : Saved data. Received by PiP Screen.
     *********/
    channel.receive('gen_command_call', ({ componentId, data }) => {
      //Execute statement for sub program

      /*************
       *  2-1. Generate execute statement
       *  Update Gripper Value and Make execute statement
       *  ex) result = 'function name(' + 'value1' + 'value2' + ... + 'last value' + ')'
       *  string value : Use JSON.stringify().
       *  boolean value : Use number().
       *  number value: Use as it is.
       *************/
      if (componentId === 'usercommand_id1') {
        //usercommand_sample_function(waitTime, isMove, initPose)
        let command = 'usercommand_sample_function(';
        command += `${data.waitTime as number}, `;
        command += `${(data.useOverridePose as boolean) ? 'True' : 'False'}, `;
        command += `[${data.initPose.pose as SixNumArray}])`;

        logger.debug(
          `gen command call(user command) : ${command} , ComponentID = ${componentId}, data = ${JSON.stringify(
            data,
          )}`,
        );
        //case1. send string type command call
        channel.send('gen_command_call', command);
      }

      if (componentId === 'usercommand_id2') {
        let result = {};
        let command = '';
        //usercommand_sample_calcXyzToZyz(zyxPose)
        command +=
          `usercommand_sample_calcXyzToZyz(` + `[${data.zyxPose}]` + `)`;

        if (data.variableSelected === '') {
          result = command;
        } else {
          result = {
            command: command,
            variableName: data.variableSelected,
          };
        }

        logger.debug(
          `gen command call(user command) : ${result} , ComponentID = ${componentId}, data = ${JSON.stringify(
            data,
          )}`,
        );
        //case2. send object command call
        // variableName is ""
        // {variableName} = calcXyzToZyz(zyxPose)
        channel.send('gen_command_call', result);
      }
    }); //channel.receive(gen command call)
    return true;
  } //onBind
} //ServiceForTaskEditor
